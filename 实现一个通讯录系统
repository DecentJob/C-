#define _CRT_SECURE_NO_WARNINGS 1 

#include <iostream>
#include<string>

#define MAX 1000
using namespace std;
void ShowMenu()
{
	cout << "****************************" << endl;
	cout << "********1.添加联系人********" << endl;
	cout << "********2.显示联系人********" << endl;
	cout << "********3.删除联系人********" << endl;
	cout << "********4.查找联系人********" << endl;
	cout << "********5.修改联系人********" << endl;
	cout << "********6.清空联系人********" << endl;
	cout << "********0.退出通讯录********" << endl;
	cout << "****************************" << endl;
}

//设计联系人的结构体
struct Person {
	string m_name;
	int m_Sex;
	int age;
	string m_Phone;
	string m_Addr;
};
//设计通讯录的结构体
struct Addressbooks {
	//通讯录中保存的联系人数组
	struct Person personArrary[MAX];


	//通讯录中当前记录联系人的个数

	int m_Size;

};
//1.添加联系人
void AddPerson(Addressbooks* abs)
{
	//判断通讯录是否已满，如果满了就不再添加
	if (abs->m_Size == MAX)
	{
		cout << "通讯录已满，无法添加！" << endl;
		return;
	}
	else
	{
		//姓名
		string name;
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personArrary[abs->m_Size].m_name = name;

		//性别
		cout << "请输入性别："<<endl;
		cout << "1---男" << endl;
		cout << "2---女" << endl;
		int sex = 0;

		while (true)
		{
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArrary[abs->m_Size].m_Sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}

		//年龄
		cout << "请输入年龄：" << endl;
		int age;
		cin >> age;
		abs->personArrary[abs->m_Size].age = age;

		//电话
		cout << "请输入电话：" << endl;
		string phone;
		cin >> phone;
		abs->personArrary[abs->m_Size].m_Phone = phone;

		//住址
		cout << "请输入住址：" << endl;
		string address;
		cin >> address;
		abs->personArrary[abs->m_Size].m_Addr = address;
        //更新通讯录
		abs->m_Size++;
		cout << "添加成功" << endl;

		system("pause");
		system("cls");
	}
}

//2.显示所有联系人
void showPreson(Addressbooks* abs)
{
	//判断通讯录中人数是否为0，若为0，提示记录为空
	//如果不为0，显示记录的联系人信息
	if (abs->m_Size == 0)
	{
		cout << "通讯录为空" << endl;
	}
	else
	{
		for (int i = 0; i < abs->m_Size; i++)
		{
			cout << "姓名：" << abs->personArrary[i].m_name << '\t';
			cout << "性别：" << (abs->personArrary[i].m_Sex == 1 ? "男":"女") << '\t';
			cout << "年龄：" << abs->personArrary[i].age << '\t';
			cout << "电话：" << abs->personArrary[i].m_Phone << '\t';
			cout << "住址：" << abs->personArrary[i].m_Addr<< endl;
		}
	}
	system("pause");//按任意按键继续
	system("cls");//清屏
}

//检测联系人是否存在，若存在，找到其位置，不存在返回-1

int isExist(Addressbooks* abs, string name)
{
	for (int i = 0; i < abs->m_Size; i++)
	{
		//找到用户输入的姓名
		if (abs->personArrary[i].m_name == name)
		{
			return i;//找到了，返回下标
		}
		return -1;//遍历数组没找到，返回-1
	}
}
//3.删除指定联系人
void deletePerson(Addressbooks* abs)
{
	cout << "请输入您要删除的联系人" << endl;
	string name;
	cin >> name;
	int ret = isExist(abs, name);

	if (ret != -1)
	{
		for (int i = ret; i < abs->m_Size; i++)
		{
			abs->personArrary[i] = abs->personArrary[i + 1];//数据前移
		}
		abs->m_Size--;
		cout << "删除成功" << endl;
	}
	else
	{
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}

//4.查找联系人
void findPerson(Addressbooks* abs)
{
	cout << "请输入您要查找的联系人" << endl;
	string name;
	cin >> name;
	//判断联系人是否在通讯录中
	int ret = isExist(abs, name);

	if (ret != -1)
	{
		cout << "姓名：" << abs->personArrary[ret].m_name << '\t';
		cout << "性别：" << (abs->personArrary[ret].m_Sex == 1 ? "男" : "女") << '\t';
		cout << "年龄：" << abs->personArrary[ret].age << '\t';
		cout << "电话：" << abs->personArrary[ret].m_Phone << '\t';
		cout << "住址：" << abs->personArrary[ret].m_Addr << endl;
	}
	else
	{
		cout << "查无此人" << endl;
	}

	system("pause");
	system("cls");
}

void modifyPerson(Addressbooks* abs)
{
	cout << "请输入您要修改的联系人：" << endl;
	string name;
	cin >> name;

	//判断联系人是否存在通讯录中
	int ret = isExist(abs, name);
	if (ret != -1)//找到联系人
	{
		//姓名
		string name;
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personArrary[ret].m_name = name;
		//性别
		cout << "请输入性别：" << endl;
		cout << "1---男" << endl;
		cout << "2---女" << endl;
		int sex = 0;
		while (1)
		{
			cin >> sex;
			if (sex == 1 || sex == 0)
			{
				abs->personArrary[ret].m_Sex = sex;
				break;
			}
			cout << "输入有误请重新输入" << endl;
		}
		//年龄
		int age=0;
		cout << "请输入年龄：" << endl;
		cin >> age;
		abs->personArrary[ret].age = age;

		//电话
		string phone;
		cout << "请输入电话：" << endl;
		cin >> phone;
		abs->personArrary[ret].m_Phone = phone;

		//住址
		string address;
		cout << "请输入住址：" << endl;
		cin >> address;
		abs->personArrary[ret].m_Addr = address;
	}
	else
	{
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}

//6.清空所有联系人
void cleanPerson(Addressbooks* abs)
{
	abs->m_Size = 0;
	cout << "通讯录已清空" << endl;
	system("pause");
	system("cls");
}

int main()
{
	//创建通讯录的结构体变量
	Addressbooks abs;
	//初始化通讯录中当前人员个数
	abs.m_Size = 0;

	int select = 0;//创建用户选择输入变量
	while (true)
	{
		//显示菜单
		ShowMenu();
		
		cin >> select;
		switch (select)
		{
		case 1://添加联系人
			AddPerson(&abs);
			break;
		case 2://显示联系人
			showPreson(&abs);
			break;
		case 3://删除联系人
			deletePerson(&abs);
			break;
		case 4://查找联系人
			findPerson(&abs);
			break;
		case 5://修改联系人
			modifyPerson(&abs);
			break;
		case 6://清空联系人
			cleanPerson(&abs);
			break;
		case 0://退出通讯录
			cout << "欢迎下次使用" << endl;
		default:
			break;
		}
	}
	return 0;
}

